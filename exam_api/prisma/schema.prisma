generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "./ERD.md"
  includeRelationFromFields = true
  disableEmoji              = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// タグタイプの列挙型
enum TagType {
  Flag
  Categorical
  Array
  Enum
  Text
}

/// 難易度の列挙型
enum DifficultyLevel {
  LOW
  MID
  HIGH
}

/// 問題タイプの列挙型
enum ProblemType {
  calc
  memorization
}

/// カテゴリの列挙型
enum CategoryValue {
  law
  safety
  equipment
}

/// 試験種別の列挙型
enum ExamType {
  L1_ELECTRIC @map("1級電気")
  L1_PIPE     @map("1級管")
  L2_ELECTRIC @map("2級電気")
  L2_PIPE     @map("2級管")
}

/// 組織
model Organization {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  User      User[]

  @@map("organizations")
}

/// ユーザー
model User {
  id                Int                 @id @default(autoincrement())
  firstName         String              @map("first_name") @db.VarChar(20)
  lastName          String              @map("last_name") @db.VarChar(20)
  email             String              @unique @db.VarChar(255)
  organizationId    Int                 @map("organization_id")
  Organization      Organization        @relation(fields: [organizationId], references: [id])
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime            @updatedAt @map("updated_at") @db.Timestamptz()
  UserAnswer        UserAnswer[]
  UserStats         UserStats[]
  UserAnswerSummary UserAnswerSummary[]

  @@map("users")
}

/// 試験種別(1級電・1級管)
model Type {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  slug     String     @unique @db.VarChar(255)
  Category Category[]

  @@map("types")
}

/// 単元
model Category {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  description       String              @db.VarChar(255)
  slug              String              @unique @db.VarChar(255)
  Type              Type                @relation(fields: [typeId], references: [id])
  typeId            Int                 @map("type_id")
  Question          Question[]
  UserStats         UserStats[]
  UserAnswerSummary UserAnswerSummary[]

  @@map("categories")
}

/// タグ定義
model TagDefinition {
  id             Int           @id @default(autoincrement())
  tagKey         String        @unique @map("tag_key") @db.VarChar(50)
  tagType        TagType       @map("tag_type")
  description    String        @db.Text
  possibleValues Json?         @map("possible_values")
  remarks        String?       @db.Text
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  QuestionTag    QuestionTag[]

  @@map("tag_definitions")
}

/// 問題とタグの関連付け
model QuestionTag {
  id           Int           @id @default(autoincrement())
  questionId   Int           @map("question_id")
  tagKey       String        @map("tag_key") @db.VarChar(50)
  tagValue     String        @map("tag_value") @db.Text
  aiInference  String?       @map("ai_inference") @db.VarChar(20)
  remarks      String?       @db.Text
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  Question     Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  TagDefinition TagDefinition @relation(fields: [tagKey], references: [tagKey], onDelete: Cascade)

  @@unique([questionId, tagKey])
  @@index([questionId])
  @@index([tagKey])
  @@index([tagValue])
  @@map("question_tags")
}

/// 問題
model Question {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  body             String             @db.Text
  Category         Category           @relation(fields: [categoryId], references: [id])
  categoryId       Int                @map("category_id")
  Explain          Explain            @relation(fields: [explainId], references: [id])
  explainId        Int                @unique @map("explain_id")
  Answer           Answer[]
  UserAnswer       UserAnswer[]
  QuestionTag      QuestionTag[]
  FrequentQuestion FrequentQuestion[]

  @@map("questions")
}

/// 選択肢
model Answer {
  id         Int          @id @default(autoincrement())
  body       String       @db.Text
  Question   Question     @relation(fields: [questionId], references: [id])
  questionId Int          @map("question_id")
  isCorrect  Boolean      @default(false) @map("is_correct") /// true:正解, false:不正解
  UserAnswer UserAnswer[]

  @@map("answers")
}

/// ユーザーの回答
model UserAnswer {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int      @map("question_id")
  answer     Answer   @relation(fields: [answerId], references: [id])
  answerId   Int      @map("answer_id")
  status     Int      @default(1) /// 1:未回答, 2:正解, 3:不正解
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("user_answers")
}

/// 解説
model Explain {
  id          Int           @id @default(autoincrement())
  body        String        @db.Text
  question    Question?
  ExplainTerm ExplainTerm[]

  @@map("explains")
}

/// 頻出問題リスト
model FrequentQuestion {
  id             Int      @id @default(autoincrement())
  question       Question @relation(fields: [questionId], references: [id])
  questionId     Int      @map("question_id")
  frequencyScore Decimal  @map("frequency_score") @db.Decimal(5, 2) /// 過去の出題回数をスコア化
  accuracyScore  Decimal  @map("accuracy_score") @db.Decimal(5, 2) /// ユーザーの正答率をスコア化
  totalScore     Decimal  @map("total_score") @db.Decimal(5, 2) ///  合算したスコアの値
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("frequent_questions")
}

/// ユーザーの合格率
model UserStats {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id")
  score      Decimal  @map("score") @db.Decimal(5, 2) /// 合格率(直近50問の正答率)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("user_stats")
}

/// ユーザー回答の集計用テーブル
model UserAnswerSummary {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @map("user_id")
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   Int      @map("category_id")
  totalCount   Int      @map("total_count") /// 問題数
  correctCount Int      @map("correct_count") /// 正解数
  date         DateTime @db.Date

  @@map("user_answer_summaries")
}

/// 用語タグ
model TermTag {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  Term Term[]

  @@map("term_tags")
}

/// 用語
model Term {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String        @db.Text
  filePath    String?       @map("file_path") @db.Text
  TermTag     TermTag       @relation(fields: [termTagId], references: [id])
  termTagId   Int           @map("term_tag_id")
  ExplainTerm ExplainTerm[]

  @@map("terms")
}

/// 解説と用語の中間テーブル
model ExplainTerm {
  explain    Explain @relation(fields: [explainsId], references: [id])
  term       Term    @relation(fields: [termsId], references: [id])
  explainsId Int     @map("explain_id")
  termsId    Int     @map("term_id")

  @@id([explainsId, termsId])
  @@map("explain_terms")
} 